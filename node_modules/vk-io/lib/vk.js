"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _https = require("https");

var _util = require("util");

var _api = _interopRequireDefault(require("./api"));

var _auth = _interopRequireDefault(require("./auth"));

var _upload = _interopRequireDefault(require("./upload"));

var _collect = _interopRequireDefault(require("./collect"));

var _updates = _interopRequireDefault(require("./updates"));

var _snippets = _interopRequireDefault(require("./snippets"));

var _streaming = _interopRequireDefault(require("./streaming"));

var _constants = require("./util/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Main class
 *
 * @public
 */
class VK {
  /**
   * Constructor
   *
   * @param {Object} options
   */
  constructor(options = {}) {
    this.options = Object.assign({}, _constants.defaultOptions, {
      agent: new _https.Agent({
        keepAlive: true,
        keepAliveMsecs: 10000
      })
    });
    this.setOptions(options);
    this.api = new _api.default(this);
    this.auth = new _auth.default(this);
    this.upload = new _upload.default(this);
    this.collect = new _collect.default(this);
    this.updates = new _updates.default(this);
    this.snippets = new _snippets.default(this);
    this.streaming = new _streaming.default(this);
    this.captchaHandler = null;
    this.twoFactorHandler = null;
  }
  /**
   * Returns custom tag
   *
   * @return {string}
   */


  get [Symbol.toStringTag]() {
    return 'VK';
  }
  /**
   * Sets options
   *
   * @param {Object} options
   *
   * @return {this}
   */


  setOptions(options) {
    Object.assign(this.options, options);
    return this;
  }
  /**
   * Sets token
   *
   * @param {string} token
   *
   * @return {this}
   */


  setToken(token) {
    this.options.token = token;
    return this;
  }
  /**
   * Returns token
   *
   * @return {?string}
   */


  getToken() {
    return this.options.token;
  }
  /**
   * Sets captcha handler
   *
   * @param {?Function} handler
   *
   * @return {this}
   *
   * @example
   * 	vk.setCaptchaHandler((payload, retry) => {...});
   */


  setCaptchaHandler(handler) {
    this.captchaHandler = handler;
    return this;
  }
  /**
   * Sets two-factor handler
   *
   * @param {?Function} handler
   *
   * @return {this}
   *
   * @example
   * 	vk.setTwoFactorHandler((payload, retry) => {...});
   */


  setTwoFactorHandler(handler) {
    this.twoFactorHandler = handler;
    return this;
  }
  /**
   * Custom inspect object
   *
   * @param {?number} depth
   * @param {Object}  options
   *
   * @return {string}
   */


  [_util.inspect.custom](depth, options) {
    const {
      name
    } = this.constructor;
    const {
      api,
      updates,
      streaming,
      captchaHandler,
      twoFactorHandler
    } = this;
    const {
      app,
      token,
      login,
      phone
    } = this.options;
    const payload = {
      options: {
        app,
        login,
        phone,
        token
      },
      captchaHandler,
      twoFactorHandler,
      api,
      updates,
      streaming
    };
    return `${options.stylize(name, 'special')} ${(0, _util.inspect)(payload, options)}`;
  }

}

exports.default = VK;