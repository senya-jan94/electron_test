"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _attachment = _interopRequireDefault(require("./attachment"));

var _helpers = require("../../util/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class PhotoAttachment extends _attachment.default {
  /**
   * Constructor
   *
   * @param {Object} payload
   * @param {VK}     vk
   */
  constructor(payload, vk) {
    super('photo', payload.owner_id, payload.id, payload.access_key);
    this.vk = vk;
    this.payload = payload;
    this.filled = 'album_id' in payload && 'date' in payload;
  }
  /**
   * Load attachment payload
   *
   * @return {Promise}
   */


  async loadAttachmentPayload() {
    if (this.filled) {
      return;
    }

    const [photo] = await this.vk.api.photos.getById({
      photos: `${this.owner}_${this.id}`,
      extended: 0
    });
    this.payload = photo;

    if ('access_key' in this.payload) {
      this.accessKey = this.payload.access_key;
    }

    this.filled = true;
  }
  /**
   * Returns the ID of the user who uploaded the image
   *
   * @return {?number}
   */


  getUserId() {
    return this.payload.user_id || null;
  }
  /**
   * Returns the ID of the album
   *
   * @return {?number}
   */


  getAlbumId() {
    return this.payload.album_id || null;
  }
  /**
   * Returns the photo text
   *
   * @return {?string}
   */


  getText() {
    return this.payload.text || null;
  }
  /**
   * Returns the photo upload date (timestamp)
   *
   * @return {?number}
   */


  getDate() {
    return this.payload.date || null;
  }
  /**
   * Returns the photo height
   *
   * @return {?number}
   */


  getHeight() {
    return this.payload.height || null;
  }
  /**
   * Returns the photo width
   *
   * @return {?number}
   */


  getWidth() {
    return this.payload.width || null;
  }
  /**
   * Returns the URL of a small photo
   * (130 or 75)
   *
   * @return {?string}
   */


  getSmallPhoto() {
    if (!this.filled) {
      return null;
    }

    return (0, _helpers.getSmallPhoto)(this.payload);
  }
  /**
   * Returns the URL of a medium photo
   * (807 or 604 or less)
   *
   * @return {?string}
   */


  getMediumPhoto() {
    if (!this.filled) {
      return null;
    }

    return (0, _helpers.getMediumPhoto)(this.payload);
  }
  /**
   * Returns the URL of a large photo
   * (2560 or 1280 or less)
   *
   * @return {?string}
   */


  getLargePhoto() {
    if (!this.filled) {
      return null;
    }

    return (0, _helpers.getLargePhoto)(this.payload);
  }

}

exports.default = PhotoAttachment;