"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("util");

var _stream = _interopRequireDefault(require("./stream"));

var _limits = _interopRequireDefault(require("./limits"));

var _chain = _interopRequireDefault(require("./chain"));

var _helpers = require("../util/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Collect {
  /**
   * constructor
   *
   * @param {VK} vk
   */
  constructor(vk) {
    this.vk = vk;

    for (const [method, limit, max] of _limits.default) {
      const [group, name] = method.split('.');

      if (!(group in this)) {
        this[group] = {};
      }

      this[group][name] = (options = {}) => new _stream.default(this.vk, {
        options,
        method,
        limit,
        max
      });
    }
  }
  /**
   * Returns custom tag
   *
   * @return {string}
   */


  get [Symbol.toStringTag]() {
    return 'Collect';
  }
  /**
   * Returns new Chain instance
   *
   * @return {Chain}
   */


  chain() {
    return new _chain.default(this.vk);
  }
  /**
   * Call multiple executors
   *
   * @param {string} method
   * @param {Array}  queue
   *
   * @return {Promise<Array>}
   */


  async executes(method, queue) {
    queue = queue.map(params => (0, _helpers.getExecuteMethod)(method, params));
    const promises = [];

    while (queue.length !== 0) {
      const code = (0, _helpers.getChainReturn)(queue.splice(0, 25));
      promises.push(this.vk.api.execute({
        code
      }));
    }

    let out = {
      response: [],
      errors: []
    };

    for (const _ref of await Promise.all(promises)) {
      const {
        response,
        errors
      } = _ref;
      out = {
        response: [...out.response, ...response],
        errors: [...out.errors, ...errors]
      };
    }

    return out;
  }
  /**
   * Custom inspect object
   *
   * @param {?number} depth
   * @param {Object}  options
   *
   * @return {string}
   */


  [_util.inspect.custom](depth, options) {
    const {
      name
    } = this.constructor;
    return `${options.stylize(name, 'special')} {}`;
  }

}

exports.default = Collect;