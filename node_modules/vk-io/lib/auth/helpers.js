"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFullURL = exports.parseFormField = exports.getGroupsPermissionsByName = exports.getUsersPermissionsByName = exports.getAllGroupsPermissions = exports.getAllUsersPermissions = void 0;

var _url = require("url");

var _constants = require("../util/constants");

/**
 * Returns the entire permission bit mask
 *
 * @return {number}
 */
const getAllUsersPermissions = () => Array.from(_constants.userScopes.values()).reduce((previous, current) => previous + current, 0);
/**
 * Returns the entire permission bit mask
 *
 * @return {number}
 */


exports.getAllUsersPermissions = getAllUsersPermissions;

const getAllGroupsPermissions = () => Array.from(_constants.groupScopes.values()).reduce((previous, current) => previous + current, 0);
/**
 * Returns the bit mask of the user permission by name
 *
 * @param {Array|string} scope
 *
 * @return {number}
 */


exports.getAllGroupsPermissions = getAllGroupsPermissions;

const getUsersPermissionsByName = scope => {
  if (!Array.isArray(scope)) {
    scope = scope.split(/,\s{0,}/);
  }

  let bitMask = 0;

  for (const name of scope) {
    if (_constants.userScopes.has(name)) {
      bitMask += _constants.userScopes.get(name);
    }
  }

  return bitMask;
};
/**
 * Returns the bit mask of the group permission by name
 *
 * @param {Array|string} scope
 *
 * @return {number}
 */


exports.getUsersPermissionsByName = getUsersPermissionsByName;

const getGroupsPermissionsByName = scope => {
  if (!Array.isArray(scope)) {
    scope = scope.split(/,\s{0,}/);
  }

  let bitMask = 0;

  for (const name of scope) {
    if (_constants.groupScopes.has(name)) {
      bitMask += _constants.groupScopes.get(name);
    }
  }

  return bitMask;
};
/**
 * Parse form
 *
 * @param {Cheerio} $
 *
 * @return {Object}
 */


exports.getGroupsPermissionsByName = getGroupsPermissionsByName;

const parseFormField = $ => {
  const $form = $('form[action][method]');
  const fields = {};

  for (const _ref of $form.serializeArray()) {
    const {
      name,
      value
    } = _ref;
    fields[name] = value;
  }

  return {
    action: $form.attr('action'),
    fields
  };
};
/**
 * Returns full URL use Response
 *
 * @param {string}   action
 * @param {Response} response
 *
 * @type {URL}
 */


exports.parseFormField = parseFormField;

const getFullURL = (action, {
  url
}) => {
  if (action.startsWith('https://')) {
    return new _url.URL(action);
  }

  const {
    protocol,
    host
  } = new _url.URL(url);
  return new _url.URL(action, `${protocol}//${host}`);
};

exports.getFullURL = getFullURL;