"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _cheerio = require("cheerio");

var _url = require("url");

var _implicitFlow = _interopRequireDefault(require("./implicit-flow"));

var _errors = require("../errors");

var _constants = require("../util/constants");

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.default)('vk-io:auth:implicit-flow-user');
const {
  AUTHORIZATION_FAILED
} = _errors.authErrors;

class ImplicitFlowUser extends _implicitFlow.default {
  /**
   * Returns permission page
   *
   * @return {Response}
   */
  getPermissionsPage() {
    const {
      app
    } = this;
    let {
      scope
    } = this;

    if (scope === 'all' || scope === null) {
      scope = (0, _helpers.getAllUsersPermissions)();
    } else if (typeof scope !== 'number') {
      scope = (0, _helpers.getUsersPermissionsByName)(scope);
    }

    debug('auth scope %s', scope);
    const params = new _url.URLSearchParams({
      redirect_uri: _constants.CALLBACK_BLANK,
      response_type: 'token',
      display: 'page',
      v: _constants.API_VERSION,
      client_id: app,
      scope
    });
    const url = new _url.URL(`https://oauth.vk.com/authorize?${params}`);
    return this.fetch(url, {
      method: 'GET'
    });
  }
  /**
   * Starts authorization
   *
   * @return {Promise<Object>}
   */


  async run() {
    const {
      response
    } = await super.run();
    let {
      hash
    } = new _url.URL(response.url);

    if (hash.startsWith('#')) {
      hash = hash.substring(1);
    }

    const params = new _url.URLSearchParams(hash);

    if (params.has('error')) {
      throw new _errors.AuthError({
        message: `Failed passed grant access: ${params.get('error_description') || 'Unknown error'}`,
        code: AUTHORIZATION_FAILED
      });
    }

    const user = params.get('user_id');
    const expires = params.get('expires_in');
    return {
      email: params.get('email'),
      user: user !== null ? Number(user) : null,
      token: params.get('access_token'),
      expires: expires !== null ? Number(expires) : null
    };
  }

}

exports.default = ImplicitFlowUser;