"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = exports.getLargePhoto = exports.getMediumPhoto = exports.getSmallPhoto = exports.getRandomId = exports.resolveExecuteTask = exports.getChainReturn = exports.getExecuteMethod = exports.keyMirror = void 0;

/**
 * Creates a key and value from the keys
 *
 * @param {string[]} keys
 *
 * @return {Object}
 */
const keyMirror = keys => {
  const out = {};

  for (const key of keys) {
    out[key] = key;
  }

  return out;
};
/**
 * Returns method for execute
 *
 * @param {string} method
 * @param {Object} params
 *
 * @return {string}
 */


exports.keyMirror = keyMirror;

const getExecuteMethod = (method, params = {}) => {
  const options = {};

  for (const [key, value] of Object.entries(params)) {
    if (typeof value === 'object') {
      options[key] = String(value);
      continue;
    }

    options[key] = value;
  }

  return `API.${method}(${JSON.stringify(options)})`;
};
/**
 * Returns chain for execute
 *
 * @param {Array} methods
 *
 * @return {string}
 */


exports.getExecuteMethod = getExecuteMethod;

const getChainReturn = methods => `return [${methods.join(',')}];`;
/**
 * Resolve task
 *
 * @param {Array} tasks
 * @param {Array} results
 */


exports.getChainReturn = getChainReturn;

const resolveExecuteTask = (tasks, result) => {
  let errors = 0;
  result.response.forEach((response, i) => {
    if (response !== false) {
      tasks[i].resolve(response);
      return;
    }

    tasks[i].reject(result.errors[errors]);
    errors += 1;
  });
};
/**
 * Returns random ID
 *
 * @return {number}
 */


exports.resolveExecuteTask = resolveExecuteTask;

const getRandomId = () => `${Math.floor(Math.random() * 1e4)}${Date.now()}`;
/**
 * Returns the URL of a small photo
 *
 * @param {Object} photo
 *
 * @return {string}
 */


exports.getRandomId = getRandomId;

const getSmallPhoto = photo => photo.photo_130 || photo.photo_75;
/**
 * Returns the URL of a medium photo
 *
 * @param {Object} photo
 *
 * @return {string}
 */


exports.getSmallPhoto = getSmallPhoto;

const getMediumPhoto = photo => photo.photo_807 || photo.photo_604 || getSmallPhoto(photo);
/**
 * Returns the URL of a large photo
 *
 * @param {Object} photo
 *
 * @return {string}
 */


exports.getMediumPhoto = getMediumPhoto;

const getLargePhoto = photo => photo.photo_2560 || photo.photo_1280 || getMediumPhoto(photo);
/**
 * Delay N-ms
 *
 * @param {number} delayed
 *
 * @return {Promise}
 */


exports.getLargePhoto = getLargePhoto;

const delay = delayed => new Promise(resolve => setTimeout(resolve, delayed));

exports.delay = delay;